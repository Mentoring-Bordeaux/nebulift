name: CI and Docker Build Pipeline

on:
  push:
    branches:
      - main
      - feature/github-workflows
  pull_request:
    branches: 
      - main
      - feature/github-workflows


jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Configuration de l'environnement .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Configuration de Node.js et pnpm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Validation du build backend
      - name: Build Backend
        run: |
          cd backend
          dotnet restore
          dotnet build --configuration Release
          
      # Validation du build frontend
      - name: Build Frontend
        run: |
          cd frontend
          pnpm install
          pnpm run build

      # Build et test avec Docker Compose
      - name: Build with Docker Compose
        run: docker compose build

      # Démarrage des services pour tests
      - name: Start services
        run: |
          docker compose up -d
          # Attendre que les services démarrent
          sleep 30

      # Test de disponibilité des services
      - name: Test services availability
        run: |
          # Test du backend
          curl -f http://localhost:5052/weatherforecast || exit 1
          
          # Test du frontend
          curl -f http://localhost:3000 || exit 1

      # Arrêt des services
      - name: Stop services
        if: always()  # S'exécute même si les étapes précédentes ont échoué
        run: docker compose down

      # Notification de fin de pipeline
      - name: Pipeline Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Pipeline completed successfully"
          else
            echo "❌ Pipeline failed"
          fi