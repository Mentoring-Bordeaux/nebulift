name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker images
      run: docker compose build

    - name: Create Docker network
      run: docker network create nebulift-network || true

    - name: Start containers
      run: |
        docker compose up -d
        echo "Waiting for services to be ready..."
        sleep 45  # Augmenté pour donner plus de temps au démarrage

    - name: Check container status and logs
      run: |
        docker compose ps
        echo "Backend Logs:"
        docker compose logs backend
        echo "Frontend Logs:"
        docker compose logs frontend
        echo "Network Information:"
        docker network inspect nebulift-network

    - name: Test Backend API
      run: |
        for i in {1..10}; do
          echo "Attempt $i: Testing Backend API..."
          response=$(curl -s -w "\n%{http_code}" http://localhost:5052/weatherforecast)
          http_code=$(echo "$response" | tail -n1)
          content=$(echo "$response" | sed '$ d')
          if [ "$http_code" = "200" ] && echo "$content" | grep -q "temperatureC"; then
            echo "Backend API test successful"
            echo "Response: $content"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "Backend API test failed after 10 attempts"
            echo "Last response: $content"
            echo "HTTP code: $http_code"
            exit 1
          fi
          sleep 10
        done

    - name: Test Frontend
      run: |
        for i in {1..10}; do
          echo "Attempt $i: Testing Frontend..."
          if curl -s -f http://localhost:3000 | grep -q "<div"; then
            echo "Frontend test successful"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "Frontend test failed after 10 attempts"
            exit 1
          fi
          sleep 10
        done

    - name: Test API through Frontend
      run: |
        response=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/weatherforecast)
        http_code=$(echo "$response" | tail -n1)
        content=$(echo "$response" | sed '$ d')
        echo "HTTP Status Code: $http_code"
        echo "Response Content: $content"
        if [ "$http_code" = "200" ] && echo "$content" | grep -q "temperatureC"; then
          echo "API through Frontend test successful"
        else
          echo "API through Frontend test failed"
          echo "Response: $content"
          exit 1
        fi

    - name: Print container logs on failure
      if: failure()
      run: |
        echo "Docker compose logs:"
        docker compose logs
        echo "Docker compose ps:"
        docker compose ps
        echo "Network information:"
        docker network inspect nebulift-network

    - name: Clean up
      if: always()
      run: |
        docker compose down
        docker network rm nebulift-network || true